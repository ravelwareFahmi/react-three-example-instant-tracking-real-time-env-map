{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Model","gltf","useLoader","GLTFLoader","scene","traverse","node","isMesh","castShadow","scale","object","position","receiveShadow","rotation","Math","PI","attach","opacity","Lights","intensity","color","App","useState","placementMode","setPlacementMode","shadows","environmentMap","poseMode","placementCameraOffset","fallback","Html","style","fontWeight","id","role","onKeyPress","currentPlacementMode","tabIndex","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LASA,SAASA,IACP,IAAMC,EAAOC,oBAAUC,IAAY,oBAInC,OAHAF,EAAKG,MAAMC,UAAS,SAACC,GACfA,EAAKC,SAAUD,EAAKE,YAAa,MAGrC,kCACE,2BAAWA,YAAU,EAACC,MAAM,MAAMC,OAAQT,EAAKG,MAAOO,SAAS,MAC/D,uBAAMC,eAAa,EAACC,SAAU,EAAEC,KAAKC,GAAG,EAAG,EAAG,GAA9C,UACE,qCAAqBC,OAAO,aAC5B,gCAAgBA,OAAO,WAAWC,QAAS,WAMnD,SAASC,IACP,OACE,kCACI,8BAAcC,UAAW,GAAKC,MAAM,UACpC,kCACAZ,YAAU,EACVG,SAAU,CAAC,EAAG,GAAI,GAClBQ,UAAW,GACX,cAAa,KACb,sBAAqB,EACrB,sBAAqB,EACrB,oBAAmB,EACnB,wBAAuB,EACvB,qBAAoB,GACpB,oBAAmB,GACnB,uBAAsB,EACtB,uBAAsB,KACtB,wBAAuB,UAqChBE,MA/Bf,WACE,MAA0CC,oBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAEA,OACE,qCACE,cAAC,uBAAD,IACA,eAAC,eAAD,CAAcC,SAAO,EAArB,UACE,cAAC,eAAD,CAAcC,gBAAc,EAACC,SAAS,kBACpC,eAAC,iBAAD,CAAgBJ,cAAeA,EAAeK,sBAAuB,CAAC,EAAG,GAAI,GAA7E,UACE,cAAC,WAAD,CAAUC,SAAU,cAACC,EAAA,EAAD,UAAM,qBAAKC,MAAO,CAACX,MAAO,QAASY,WAAY,QAAzC,gCAA1B,SACE,cAAChC,EAAD,MAEF,cAACkB,EAAD,UAIN,sBACEe,GAAG,gBACHC,KAAK,SACLC,WAAY,WAAQX,GAAkB,SAACY,GAAD,OAA2BA,MACjEC,SAAU,EACVC,QAAS,WAAQd,GAAkB,SAACY,GAAD,OAA2BA,MALhE,wBAQGb,EAAgB,UAAY,YAR/B,oBClDSgB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d88a0844.chunk.js","sourcesContent":["import React, { Suspense, useState } from 'react';\nimport {\n ZapparCamera, InstantTracker, ZapparCanvas, BrowserCompatibility,\n} from '@zappar/zappar-react-three-fiber';\nimport { useLoader } from '@react-three/fiber';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { Html } from '@react-three/drei';\n\n\nfunction Model() {\n  const gltf = useLoader(GLTFLoader, \"./assets/mug.glb\")\n  gltf.scene.traverse((node : any) => {\n    if (node.isMesh) { node.castShadow = true; }\n  });\n  return (\n    <group>\n      <primitive castShadow scale=\"1.2\" object={gltf.scene} position=\"0\"  />\n      <mesh receiveShadow rotation={[-Math.PI/2 ,0 ,0]}>\n        <planeBufferGeometry attach=\"geometry\" />\n        <shadowMaterial attach=\"material\" opacity={0.2} />\n      </mesh>\n    </group>\n  )\n}\n\nfunction Lights() {\n  return (\n    <group>\n        <ambientLight intensity={0.6} color=\"white\" />\n        <directionalLight\n        castShadow\n        position={[0, 30, 0]}\n        intensity={0.8}\n        shadow-bias={0.0001}\n        shadow-camera-right={4}\n        shadow-camera-left={-4}\n        shadow-camera-top={4}\n        shadow-camera-bottom={-4}\n        shadow-camera-near={0.1}\n        shadow-camera-far={50}\n        shadow-camera-radius={2}\n        shadow-mapSize-width={1024}\n        shadow-mapSize-height={1024}\n        />\n    </group>\n  )\n}\n\nfunction App() {\n  const [placementMode, setPlacementMode] = useState(true);\n\n  return (\n    <>\n      <BrowserCompatibility />\n      <ZapparCanvas shadows >\n        <ZapparCamera environmentMap poseMode=\"anchor-origin\" />\n          <InstantTracker placementMode={placementMode} placementCameraOffset={[0, 0, -2]}>\n            <Suspense fallback={<Html><div style={{color: \"white\", fontWeight: \"bold\"}}>Model Loading...</div></Html>}>\n              <Model />\n            </Suspense>\n            <Lights />\n          </InstantTracker>\n\n      </ZapparCanvas>\n      <div\n        id=\"zappar-button\"\n        role=\"button\"\n        onKeyPress={() => { setPlacementMode(((currentPlacementMode) => !currentPlacementMode)); }}\n        tabIndex={0}\n        onClick={() => { setPlacementMode(((currentPlacementMode) => !currentPlacementMode)); }}\n      >\n        Tap here to\n        {placementMode ? ' place ' : ' pick up '}\n        the object\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}